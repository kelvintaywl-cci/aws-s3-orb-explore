version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1.4
  # aws-s3: circleci/aws-s3@3.1.1
  aws-s3:
    version: 2.1
    description: |
        Integrate Amazon AWS S3 with your CircleCI CI/CD pipeline easily with the aws-s3 orb.
    display:
        home_url: https://aws.amazon.com/s3/
        source_url: https://github.com/CircleCI-Public/aws-s3-orb
    orbs:
        aws-cli: circleci/aws-cli@3.1.4
    commands:
        copy:
            description: |
                Copies a local file or S3 object to another location locally or in S3. https://docs.aws.amazon.com/cli/latest/reference/s3/cp.html
            parameters:
                arguments:
                    default: ""
                    description: If you wish to pass any additional arguments to the aws copy command (i.e. -sse)
                    type: string
                aws-access-key-id:
                    default: AWS_ACCESS_KEY_ID
                    description: aws access key id override
                    type: env_var_name
                aws-region:
                    default: AWS_REGION
                    description: aws region override
                    type: env_var_name
                aws-secret-access-key:
                    default: AWS_SECRET_ACCESS_KEY
                    description: aws secret access key override
                    type: env_var_name
                from:
                    description: A local file or source s3 object
                    type: string
                install-aws-cli:
                    default: true
                    description: The aws-cli is installed when this parameter is set to true. Set to false to skip installation
                    type: boolean
                profile-name:
                    default: ""
                    description: AWS profile name to be configured.
                    type: string
                role-arn:
                    default: ""
                    description: |
                        The Amazon Resource Name (ARN) of the role that the caller is assuming.
                        Role ARN must be configured for web identity.
                    type: string
                role-session-name:
                    default: ${CIRCLE_JOB}
                    description: An identifier for the assumed role session. Environment varaibles will be evaluated.
                    type: string
                session-duration:
                    default: "3600"
                    description: The duration of the session in seconds
                    type: string
                to:
                    description: A local target or s3 destination
                    type: string
                when:
                    default: on_success
                    description: |
                        Add the when attribute to a job step to override its default behaviour
                        and selectively run or skip steps depending on the status of the job.
                    enum:
                        - on_success
                        - on_fail
                        - always
                    type: enum
            steps:
                - when:
                    condition: <<parameters.install-aws-cli>>
                    steps:
                        - when:
                            condition: <<parameters.role-arn>>
                            steps:
                                - aws-cli/setup:
                                    aws-region: <<parameters.aws-region>>
                                    profile-name: <<parameters.profile-name>>
                                    role-arn: <<parameters.role-arn>>
                                    role-session-name: <<parameters.role-session-name>>
                                    session-duration: <<parameters.session-duration>>
                        - unless:
                            condition: <<parameters.role-arn>>
                            steps:
                                - aws-cli/setup:
                                    aws-access-key-id: << parameters.aws-access-key-id >>
                                    aws-region: << parameters.aws-region >>
                                    aws-secret-access-key: << parameters.aws-secret-access-key >>
                                    profile-name: << parameters.profile-name >>
                - run:
                    command: "#!/bin/sh\nPARAM_AWS_S3_FROM=$(eval echo \"${PARAM_AWS_S3_FROM}\")\nPARAM_AWS_S3_TO=$(eval echo \"${PARAM_AWS_S3_TO}\")\nPARAM_AWS_S3_ARGUMENTS=$(eval echo \"${PARAM_AWS_S3_ARGUMENTS}\")\n\nif [ -n \"${PARAM_AWS_S3_ARGUMENTS}\" ]; then\n    set -- \"$@\" \"${PARAM_AWS_S3_ARGUMENTS}\"\nfi\n\nif [ -n \"${PARAM_AWS_S3_PROFILE_NAME}\" ]; then\n    set -- \"$@\" --profile \"${PARAM_AWS_S3_PROFILE_NAME}\"\nfi    \n\necho $@\n\naws s3 cp \"${PARAM_AWS_S3_FROM}\" \"${PARAM_AWS_S3_TO}\" \"$@\"\n"
                    environment:
                        PARAM_AWS_S3_ARGUMENTS: <<parameters.arguments>>
                        PARAM_AWS_S3_FROM: <<parameters.from>>
                        PARAM_AWS_S3_PROFILE_NAME: <<parameters.profile-name>>
                        PARAM_AWS_S3_TO: <<parameters.to>>
                    name: S3 Copy << parameters.from >> -> << parameters.to >>
                    when: <<parameters.when>>
        sync:
            description: |
                Syncs directories and S3 prefixes. https://docs.aws.amazon.com/cli/latest/reference/s3/sync.html
            parameters:
                arguments:
                    default: ""
                    description: |
                        Optional additional arguments to pass to the `aws sync` command (e.g., `--acl public-read`). Note: if passing a multi-line value to this parameter, include `\` characters after each line, so the Bash shell can correctly interpret the entire command.
                    type: string
                aws-access-key-id:
                    default: AWS_ACCESS_KEY_ID
                    description: aws access key id override
                    type: env_var_name
                aws-region:
                    default: AWS_REGION
                    description: aws region override
                    type: env_var_name
                aws-secret-access-key:
                    default: AWS_SECRET_ACCESS_KEY
                    description: aws secret access key override
                    type: env_var_name
                from:
                    description: A local *directory* path to sync with S3
                    type: string
                install-aws-cli:
                    default: true
                    description: The aws-cli is installed when this parameter is set to true. Set to false to skip installation
                    type: boolean
                profile-name:
                    default: ""
                    description: AWS profile name to be configured.
                    type: string
                role-arn:
                    default: ""
                    description: |
                        The Amazon Resource Name (ARN) of the role that the caller is assuming.
                        Role ARN must be configured for web identity.
                    type: string
                role-session-name:
                    default: ${CIRCLE_JOB}
                    description: An identifier for the assumed role session. Environment varaibles will be evaluated.
                    type: string
                session-duration:
                    default: "3600"
                    description: The duration of the session in seconds
                    type: string
                to:
                    description: A URI to an S3 bucket, i.e. 's3://the-name-my-bucket'
                    type: string
                when:
                    default: on_success
                    description: |
                        Add the when attribute to a job step to override its default behaviour
                        and selectively run or skip steps depending on the status of the job.
                    enum:
                        - on_success
                        - on_fail
                        - always
                    type: enum
            steps:
                - when:
                    condition: <<parameters.install-aws-cli>>
                    steps:
                        - when:
                            condition: <<parameters.role-arn>>
                            steps:
                                - aws-cli/setup:
                                    aws-region: <<parameters.aws-region>>
                                    profile-name: <<parameters.profile-name>>
                                    role-arn: <<parameters.role-arn>>
                                    role-session-name: <<parameters.role-session-name>>
                                    session-duration: <<parameters.session-duration>>
                        - unless:
                            condition: <<parameters.role-arn>>
                            steps:
                                - aws-cli/setup:
                                    aws-access-key-id: << parameters.aws-access-key-id >>
                                    aws-region: << parameters.aws-region >>
                                    aws-secret-access-key: << parameters.aws-secret-access-key >>
                                    profile-name: << parameters.profile-name >>
                - deploy:
                    command: |
                        #!/bin/sh
                        PARAM_AWS_S3_FROM=$(eval echo "${PARAM_AWS_S3_FROM}")
                        PARAM_AWS_S3_TO=$(eval echo "${PARAM_AWS_S3_TO}")
                        PARAM_AWS_S3_ARGUMENTS=$(eval echo "${PARAM_AWS_S3_ARGUMENTS}")

                        if [ -n "${PARAM_AWS_S3_ARGUMENTS}" ]; then
                            set -- "$@" "${PARAM_AWS_S3_ARGUMENTS}"
                        fi

                        if [ -n "${PARAM_AWS_S3_PROFILE_NAME}" ]; then
                            set -- "$@" --profile "${PARAM_AWS_S3_PROFILE_NAME}"
                        fi

                        aws s3 sync "${PARAM_AWS_S3_FROM}" "${PARAM_AWS_S3_TO}" "$@"
                    environment:
                        PARAM_AWS_S3_ARGUMENTS: <<parameters.arguments>>
                        PARAM_AWS_S3_FROM: <<parameters.from>>
                        PARAM_AWS_S3_PROFILE_NAME: <<parameters.profile-name>>
                        PARAM_AWS_S3_TO: <<parameters.to>>
                    name: S3 Sync
                    when: <<parameters.when>>
    examples:
        override_credentials:
            description: |
                How to use the S3 orb with alternate credentials.
            usage:
                version: "2.1"
                orbs:
                    aws-s3: circleci/aws-s3@3.1
                jobs:
                    build:
                        docker:
                            - image: cimg/python:3.10
                        steps:
                            - checkout
                            - run: mkdir bucket && echo "lorem ipsum" > bucket/build_asset.txt
                            - aws-s3/sync:
                                arguments: |
                                    --acl public-read \
                                    --cache-control "max-age=86400"
                                aws-access-key-id: AWS_ACCESS_KEY_ID_BLUE
                                aws-region: AWS_REGION_BLUE
                                aws-secret-access-key: AWS_SECRET_ACCESS_KEY_BLUE
                                from: bucket
                                to: s3://my-s3-bucket-name/prefix
                            - aws-s3/copy:
                                arguments: --dryrun
                                from: bucket/build_asset.txt
                                to: s3://my-s3-bucket-name
                workflows:
                    s3-example:
                        jobs:
                            - build
        sync_and_copy:
            description: |
                The S3 orb allows you to "sync" directories or "copy" files to an S3 bucket. The example below shows a typical CircleCI job where a file "bucket/build_asset.txt" is created, followed by how we can both sync, and/or copy the file. It also demonstrates the use of OIDC authentication by providing a valid AWS role-arn.
            usage:
                version: "2.1"
                orbs:
                    aws-s3: circleci/aws-s3@3.1
                jobs:
                    build:
                        docker:
                            - image: cimg/python:3.10
                        steps:
                            - checkout
                            - run: mkdir bucket && echo "lorem ipsum" > bucket/build_asset.txt
                            - aws-s3/sync:
                                arguments: |
                                    --acl public-read \
                                    --cache-control "max-age=86400"
                                from: bucket
                                role-arn: arn:aws:iam::123456789012/role/VALID-S3-ROLE
                                to: s3://my-s3-bucket-name/prefix
                            - aws-s3/copy:
                                arguments: --dryrun
                                from: bucket/build_asset.txt
                                install-aws-cli: false
                                to: s3://my-s3-bucket-name
                workflows:
                    s3-example:
                        jobs:
                            - build

jobs:
  cp:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup
      - aws-s3/copy:
          install-aws-cli: false
          arguments: |
            --cache-control \"max-age=15\" \
            --acl bucket-owner-full-control
          from: README.md
          to: "s3://aws-s3-orb-explore/source-code/"

workflows:
  main:
    jobs:
      - cp
